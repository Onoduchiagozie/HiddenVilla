@page "/registration"
@using HiddenVilla_Client.Model.api_models
@inject IAuthenticationService authenticationService
@inject NavigationManager navi
<EditForm Model="userRequest" OnValidSubmit="RegisterMyUser" class="pt-4">
    <DataAnnotationsValidator/>
    <div class="py-4">
        <div class=" row form-group ">
            <div class="col-6 offset-3 ">
                <div class="card border">
                    <div class="card-body px-lg-5 pt-4">
                        <h3 class="col-12 text-success text-center py-2">
                            <strong>Register</strong>
                        </h3>
                        @if (showError)
                        {
                            <div>
                                @foreach(var error in registeringError)
                                {
                                    <p class="text-danger text-center"> @error </p>
                                }
                            </div>
                        }

                        <hr style="background-color:aliceblue" />
                        <div class="py-2">
                            <InputText @bind-Value="@userRequest.Name" class="form-control" placeholder="Name..." />
                            <ValidationMessage For="(()=>userRequest.Name)" />

                        </div>
                        <div class="py-2">
                            <InputText @bind-Value="@userRequest.Email" class="form-control" placeholder="Email..." />
                            <ValidationMessage For="(()=>userRequest.Email)" />

                        </div>
                        <div class="py-2 input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text"> +234</span>
                            </div>
                            <InputText @bind-Value="@userRequest.PhoneNo" class="form-control" placeholder="Phone..." />
                            <ValidationMessage For="(()=>userRequest.PhoneNo)" />

                        </div>
                        <div class="form-row py-2">
                            <div class="col">
                                <InputText @bind-Value="@userRequest.Password" class="form-control" placeholder="Password" />
                                <ValidationMessage For="(()=>userRequest.Password)" />
                            </div>
                            <br />
                            <div class="col">
                                <InputText @bind-Value="@userRequest.ConfirmPassword" class="form-control" placeholder="Confirm Password" />
                                <ValidationMessage For="(()=>userRequest.ConfirmPassword)" />
                            </div>

                        </div>
                        <hr style="background-color:aliceblue" />
                        <div class="py-2">
                            @if (isProcessing)
                            {
                                <button type="submit" class="btn btn-success btn-block">
                                    <i class="fas fa-sign-in-alt"></i> 
                                    Loading....
                                </button>
                            }
                            else
                            {
                                <button type="submit" class="btn btn-success btn-block">
                                    <i class="fas fa-sign-in-alt"></i>
                                    Register
                                </button>
                            }
                        </div>


                    </div>
                </div>
            </div>
        </div>
    </div>
</EditForm>



@code {
    public UserRequestDTO userRequest = new UserRequestDTO();
    private bool isProcessing { get; set; } = false;
    public IEnumerable<string> registeringError{ get; set; }
    public bool showError { get; set; }



    private async Task RegisterMyUser()
    {
        showError = false;
        isProcessing = true;
        var user = await authenticationService.RegisterUser(userRequest);
        if (user.IsRegisterSuccessfull)
        {
            isProcessing = false;
            navi.NavigateTo("/login");
        }
        else
        {
            isProcessing = false;
            registeringError = user.Errors;
            showError = true;
        }

    }

}
