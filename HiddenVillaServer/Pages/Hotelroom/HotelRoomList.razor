@inject NavigationManager navigationManager
@inject HiddenVillaServer.Service.IFileUpload fileupload
@inject IHotelRoomRepo hotelRepo
@page "/hotel-room"
<DeleteConfirmation/>
@attribute [Authorize(Roles = SD.Admin)]

<div class="row mt-4">
    <div class="col-8">
        <h4 class="card-title text-info">
            Hotel Rooms
        </h4>
       </div>
       <div class="col-3 offset-1">
           <NavLink href="hotel-room/create" class="btn btn-info form-control">
                Add New Room 
           </NavLink>
       </div>
</div>
<div class="row mt-4">
    <div class="col-12">
        <table class="table table-bordered table-hover">
            <thead>
            <tr>
                <th>Name</th>
                <th>Occupancy</th>
                <th>Rate</th>
                <th>SqFt</th>
                <th>
                    <DeleteConfirmation></DeleteConfirmation>

                </th>
                 
            </tr>
            </thead>
            <tbody>
            @if(HotelRooms.Any())
            {
                foreach (var room in HotelRooms)
                {
                    <tr>
                        <td>@room.Name</td>
                        <td>@room.Occupancy</td>
                        <td>@room.RegularRate.ToString("c")</td>
                        <td>@room.SqFt</td>
                        <td>
                            <NavLink href="@($"hotel-room/edit/{room.Id}")" 
                                     class="btn btn-primary">Edit</NavLink>
                            <button class="btn btn-danger" @onclick=" () => HandleDelete(room.Id)">Delete</button>
                        </td>
                    </tr>
                       
                }
            }
            else
            {
                <tr>
                    <td colspan="5">
                        No Rooms Yet
                    </td>
                </tr>
            }
            </tbody>
        </table>
    </div>
</div>

<DeleteConfirmation/>
@code {
    
    private IEnumerable<HotelRoomDTO> HotelRooms { get; set; } = new List<HotelRoomDTO>();
    [Inject] 
    protected Sotsera.Blazor.Toaster.IToaster toast { get; set; }

    public int? DeleteRoomId { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        HotelRooms = await hotelRepo.GetAllHotelRooms();
    }

    private async Task HandleDelete(int roomId)
    {
        HotelRoomDTO hotelRoomDto = await hotelRepo.GetHotelRoom(roomId);
        foreach (var image in hotelRoomDto.HotelImages)
        {
            var imageName = image.ImageUrl.Replace($"{navigationManager.BaseUri}RoomImages/", "");
            
            fileupload.DeleteFile(imageName);

        }
        
        await hotelRepo.DeleteHotel(roomId);
        toast.Info("Hotel Room Deleted Successfully","Deleted");
        HotelRooms = await hotelRepo.GetAllHotelRooms();
    }

}
