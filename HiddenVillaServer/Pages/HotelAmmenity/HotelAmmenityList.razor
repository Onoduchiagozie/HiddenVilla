@page "/hotel-amenity"
@inject IHotelAmenity _Amenity
<ToastContainer/>
<div class="row mt-4">
    <div class="col-8">
        <h4 class="card-title text-info">
            Hotel Amenity
        </h4>
       </div>
       <div class="col-3 offset-1">
           <NavLink href="hotel-amenity/create" class="btn btn-info form-control">
                Add Amenity
           </NavLink>
       </div>
</div>
<div class="row mt-4">
    <div class="col-12">
        <table class="table table-bordered table-hover">
            <thead>
            <tr>
                <th>Name</th>
                <th>Timing</th>
                <th>Rate</th>
                <th>SqFt</th>
                <th>

                </th>
                 
            </tr>
            </thead>
            <tbody>
            @if(HotelAmenities.Any())
            {
                foreach (var item in HotelAmenities)
                {
                    <tr>
                        <td>@item.Name</td>
                        <td>@item.Timing</td>
                        <td>@item.Icon</td>
                        <td>
                            <NavLink href="@($"hotel-amenity/edit/{item.Id}")" 
                                     class="btn btn-primary">Edit</NavLink>
                            <button class="btn btn-danger" @onclick=" () => HandleDelete(item.Id)">Delete</button>
                        </td>
                    </tr>
                       
                }
            }
            else
            {
                <tr>
                    <td colspan="5">
                        No Amenities Yet
                    </td>
                </tr>
            }
            </tbody>
        </table>
    </div>
</div>

@code {

    internal IEnumerable<HotelAmenity> HotelAmenities { get; set; } = new List<HotelAmenity>();
    [Inject] 
    protected Sotsera.Blazor.Toaster.IToaster toast { get; set; }
    
    
    protected override async Task OnInitializedAsync()
    {
        HotelAmenities = await _Amenity.GetAllHotelAmenity();
        
    }

    private async Task HandleDelete(int amenityId)
    {
        await _Amenity.DeleteHotelAmenity(amenityId);
        toast.Info("Hotel Amenity Deleted Successfully","Deleted");
        HotelAmenities = await _Amenity.GetAllHotelAmenity();
    }

}
