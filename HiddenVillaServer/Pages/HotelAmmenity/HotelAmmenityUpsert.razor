@page "/hotel-amenity/create"
@page "/hotel-amenity/edit/{Id:int}"
@inject NavigationManager navigationManager
@inject IHotelAmenity _Amenity
<ToastContainer />
<div class="row mt-2 mb-5">
    <h3 class="card-title text-info mb-3  m-lg-3 ">
        @Title Amenity
    </h3>
    
    <div class="card">
        <div class="card-body">
            <EditForm Model="@HotelAmenity" OnValidSubmit="OnSubmitClick">
                <DataAnnotationsValidator/>
                <ValidationSummary/>
                <div class="form-group">
                    <label>Name</label>
                    <InputText @bind-Value="HotelAmenity.Name" class="form-control"></InputText>
                    <ValidationMessage For="()=>HotelAmenity.Name"></ValidationMessage>
                </div>
                <div class="form-group">
                    <label>Description</label>
                    <InputTextArea @bind-Value="HotelAmenity.Description" class="form-control"></InputTextArea>
                    <ValidationMessage For="()=>HotelAmenity.Description"></ValidationMessage>

                </div>
                <div class="form-group">
                    <label>Timing</label>
                    <InputText @bind-Value="HotelAmenity.Timing" class="form-control"></InputText>
                    <ValidationMessage For="()=>HotelAmenity.Timing"></ValidationMessage>

                </div>
                <div class="form-group">
                    <label>Icon Style</label>
                    <InputText @bind-Value="HotelAmenity.Icon" class="form-control"></InputText>
                    <ValidationMessage For="() => HotelAmenity.Icon"></ValidationMessage>
                </div>
                
                 <div class="form-group">
                    <button class="btn btn-primary">@Title Room</button>
                    <NavLink href="hotel-amenity" class="btn btn-secondary"> Back To Index</NavLink>
                </div>
            </EditForm>
        </div>
    </div>

</div>
@code {
    [CascadingParameter]
    public Task<AuthenticationState> IsAuthenticated { get; set; }

    [Inject]
    protected Sotsera.Blazor.Toaster.IToaster toast { get; set; }

    public HotelAmenity HotelAmenity { get; set; } = new HotelAmenity();

    public string Title { get; set; } = "Create";

    [Parameter]
    public int? Id { get; set; }

    protected async override Task OnInitializedAsync()
    {
        var authenticationstate = await IsAuthenticated;
        if (!authenticationstate.User.IsInRole(SD.Admin))
        {
            var uri = new Uri(navigationManager.Uri);
            navigationManager.NavigateTo($"/Identity/Account/Login?returnUrl={uri.LocalPath}");
        }
        if (Id != null)
        {
            Title = "Update";
            HotelAmenity = await _Amenity.GetHotelAmenity(Id.Value);
        }
        else
        {
            HotelAmenity = new HotelAmenity();
        }
    }


    private async Task OnSubmitClick()
    {
        var amenityDetailsByName = await _Amenity.IsSameNameAmenityAlreadyExists(HotelAmenity.Name);
        if (amenityDetailsByName != null && amenityDetailsByName.Id != HotelAmenity.Id)
        {
                toast.Info("Amenity Already Exists", "Object Exists");
        }

            if (Title == "Update" && HotelAmenity.Id != 0)
            {
                var amenityUpdate = await _Amenity.UpdateHotelAmenity(HotelAmenity);
                toast.Success("Hotel Room Amenity Updated Successfully", "Updated");
            }
            else
            {
                await _Amenity.CreateHotelAmenity(HotelAmenity);
                HotelAmenity = new HotelAmenity();
                toast.Success("Hotel Amenity Created Successfully", "Created");
            }

            navigationManager.NavigateTo("hotel-amenity");

        }

    

}